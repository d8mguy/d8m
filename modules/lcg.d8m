// Linear congruential generator. Recommended for cases where you need a sequence that's "slightly" random but mostly
// very easy to reset, reuse, etc. Use the math/rand go package for a serious PRNG, or crypto strong ones for relevant
// applications. Use this to generate sequences that are sort of random but where the key need is to reproduce them easily.
// As an example, note that bit 0 of the generator sequence is 0,1,0,1,...; bit 1 is 0,0,1,1,0,0,1,1,... Higher bits appear
// somewhat more random.
//
// To be slightly more abstract about it, the tradeoff here is simplicity of state versus robustness of randomness. LCG's
// like the one here have very little state, which makes them trivial to restart. Turns out the mathematicians have figured
// out that this is also why they aren't very random.

export LinCong

val mask32 = cvt(lshift(1, 32), integer)-1
val LinCong = extend tuple(curval:integer) where {
    method next = \mod() {
        val ret = curval
        // parameters are from Numerical Recipes; see wikipedia "Linear Congruential Generator"
        curval = cvt(and(1664525 * curval + 1013904223, mask32), integer)
        ret
    }
    method cur = \() {
        curval
    }
    method reset = \mod(nval:integer) {
        curval = nval
    }
}